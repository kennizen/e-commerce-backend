definitions:
  lib.Tokens:
    properties:
      refreshToken:
        type: string
      refreshTokenExp:
        type: integer
      token:
        type: string
      tokenExp:
        type: integer
    type: object
  models.Address:
    properties:
      address:
        type: string
      addressOf:
        type: integer
      country:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      phoneNumber:
        type: string
      state:
        type: string
      updatedAt:
        type: string
      zipcode:
        type: string
    type: object
  models.User:
    properties:
      age:
        type: integer
      avatar:
        type: string
      createdAt:
        type: string
      email:
        type: string
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
      middlename:
        type: string
      updatedAt:
        type: string
    type: object
  service.LoginUserPayload:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  service.RegisterUserPayload:
    properties:
      age:
        minimum: 1
        type: integer
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      middlename:
        type: string
      password:
        type: string
    required:
    - age
    - email
    - firstname
    - lastname
    - password
    type: object
  service.RenewAccessTokenPayload:
    properties:
      refToken:
        type: string
    required:
    - refToken
    type: object
  service.UserAddressPayload:
    properties:
      address:
        type: string
      country:
        type: string
      phoneNo:
        type: string
      state:
        type: string
      zipcode:
        type: string
    required:
    - address
    - country
    - phoneNo
    - state
    - zipcode
    type: object
  service.UserDetailsPayload:
    properties:
      age:
        minimum: 1
        type: integer
      avatar:
        type: string
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      middlename:
        type: string
    required:
    - age
    - email
    - firstname
    - lastname
    type: object
  utils.ResUser:
    properties:
      message:
        type: string
    type: object
  utils.ResUserWithData:
    properties:
      data: {}
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: prachurjyagogoi123@gmail.com
  description: This is a dummy backend for an ecommerce store.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: E-Commerce Backend API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: API for user login using email and password
      parameters:
      - description: Login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/service.LoginUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  $ref: '#/definitions/lib.Tokens'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: User Login
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: API for registering users
      parameters:
      - description: Register user payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/service.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.ResUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: User Register
      tags:
      - Auth
  /renew-access-token:
    get:
      consumes:
      - application/json
      description: API for renewing the access token. Make sure to provide the refresh
        token to get the new tokens
      parameters:
      - description: Renew access token payload
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/service.RenewAccessTokenPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  $ref: '#/definitions/lib.Tokens'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Renew Access Token
      tags:
      - Auth
  /user:
    delete:
      description: API for deleting a user.
      parameters:
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Delete user.
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: API for updating users details.
      parameters:
      - description: Update user details payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/service.UserDetailsPayload'
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Update user details.
      tags:
      - User
  /user/address:
    post:
      consumes:
      - application/json
      description: API for adding user addresse used as delivery address.
      parameters:
      - description: Add address payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/service.UserAddressPayload'
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.Address'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Add user address.
      tags:
      - User
  /user/address/{addressId}:
    put:
      consumes:
      - application/json
      description: API for updating a user addresse.
      parameters:
      - description: Update address payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/service.UserAddressPayload'
      - description: Address id
        in: path
        name: addressId
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.Address'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Update user address.
      tags:
      - User
swagger: "2.0"
