definitions:
  controller.AccessToken:
    properties:
      expiry:
        type: integer
      token:
        type: string
    type: object
  models.Address:
    properties:
      address:
        type: string
      addressOf:
        type: integer
      country:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      phoneNumber:
        type: string
      state:
        type: string
      updatedAt:
        type: string
      zipcode:
        type: string
    type: object
  models.Product:
    properties:
      availability:
        type: string
      category:
        type: string
      createdAt:
        type: string
      depth:
        type: number
      description:
        type: string
      height:
        type: number
      id:
        type: integer
      image:
        type: string
      price:
        type: number
      rating:
        type: number
      returnPolicy:
        type: string
      shipping:
        type: string
      stock:
        type: integer
      thumbnail:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      warranty:
        type: string
      weight:
        type: integer
      width:
        type: number
    type: object
  models.ProductReview:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      productId:
        type: integer
      rating:
        type: number
      review:
        type: string
      reviewBy:
        type: integer
      updatedAt:
        type: string
    type: object
  models.User:
    properties:
      age:
        type: integer
      avatar:
        type: string
      createdAt:
        type: string
      email:
        type: string
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
      middlename:
        type: string
      updatedAt:
        type: string
    type: object
  service.AddToCartPayload:
    properties:
      quantity:
        type: integer
    required:
    - quantity
    type: object
  service.AddressRes:
    properties:
      address:
        type: string
      country:
        type: string
      phoneNo:
        type: string
      state:
        type: string
      zipcode:
        type: string
    required:
    - address
    - country
    - phoneNo
    - state
    - zipcode
    type: object
  service.AllOrdersResponse:
    properties:
      address:
        $ref: '#/definitions/service.AddressRes'
      order:
        $ref: '#/definitions/service.OrderRes'
      product:
        $ref: '#/definitions/service.ProductRes'
    type: object
  service.AllReviewsResponse:
    properties:
      customer:
        $ref: '#/definitions/service.Customer'
      review:
        $ref: '#/definitions/service.Review'
    type: object
  service.Customer:
    properties:
      age:
        type: string
      avatar:
        type: string
      email:
        type: string
      firstname:
        type: string
      id:
        type: string
      lastname:
        type: string
      middlename:
        type: string
    type: object
  service.GetCartResponse:
    properties:
      availability:
        type: string
      category:
        type: string
      createdAt:
        type: string
      depth:
        type: number
      description:
        type: string
      height:
        type: number
      id:
        type: integer
      image:
        type: string
      price:
        type: number
      quantity:
        type: integer
      rating:
        type: number
      returnPolicy:
        type: string
      shipping:
        type: string
      stock:
        type: integer
      thumbnail:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      warranty:
        type: string
      weight:
        type: integer
      width:
        type: number
    type: object
  service.LoginUserPayload:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  service.OrderRes:
    properties:
      orderId:
        type: string
      orderTime:
        type: string
      paymentMethod:
        type: string
      paymentStatus:
        type: string
      paymentTime:
        type: string
      quantity:
        type: number
    type: object
  service.OrdersPayload:
    properties:
      addressUsed:
        type: string
      paymentMethod:
        enum:
        - ONLINE
        - COD
        type: string
      products:
        items:
          $ref: '#/definitions/service.Product'
        type: array
    required:
    - addressUsed
    - paymentMethod
    type: object
  service.Product:
    properties:
      productId:
        type: string
      quantity:
        minimum: 1
        type: integer
    required:
    - productId
    - quantity
    type: object
  service.ProductRes:
    properties:
      category:
        type: string
      description:
        type: string
      image:
        type: string
      price:
        type: number
      productId:
        type: string
      thumbnail:
        type: string
      title:
        type: string
    type: object
  service.ProductReviewPayload:
    properties:
      rating:
        type: number
      review:
        type: string
    required:
    - rating
    - review
    type: object
  service.ProductsResponse:
    properties:
      products:
        items:
          $ref: '#/definitions/models.Product'
        type: array
      totalCount:
        type: integer
    type: object
  service.RegisterUserPayload:
    properties:
      age:
        minimum: 1
        type: integer
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      middlename:
        type: string
      password:
        type: string
    required:
    - age
    - email
    - firstname
    - lastname
    - password
    type: object
  service.Review:
    properties:
      createdAt:
        type: string
      id:
        type: string
      rating:
        type: number
      review:
        type: string
      updatedAt:
        type: string
    type: object
  service.UserAddressPayload:
    properties:
      address:
        type: string
      country:
        type: string
      phoneNo:
        type: string
      state:
        type: string
      zipcode:
        type: string
    required:
    - address
    - country
    - phoneNo
    - state
    - zipcode
    type: object
  service.UserDetailsPayload:
    properties:
      age:
        minimum: 1
        type: integer
      avatar:
        type: string
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      middlename:
        type: string
    required:
    - age
    - email
    - firstname
    - lastname
    type: object
  utils.ResUser:
    properties:
      message:
        type: string
    type: object
  utils.ResUserWithData:
    properties:
      data: {}
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: prachurjyagogoi123@gmail.com
  description: This is a dummy backend for an ecommerce store.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: E-Commerce Backend API
  version: "1.0"
paths:
  /cart:
    get:
      description: API for fetching all the cart products.
      parameters:
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/service.GetCartResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Get all cart products.
      tags:
      - Cart
  /cart/product/{productId}:
    delete:
      description: API for removing a product from cart.
      parameters:
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Remove product from cart.
      tags:
      - Cart
    post:
      consumes:
      - application/json
      description: API for adding an product the cart.
      parameters:
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      - description: Cart payload
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/service.AddToCartPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Add product to cart.
      tags:
      - Cart
    put:
      consumes:
      - application/json
      description: API for updating the quantity for a cart product.
      parameters:
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      - description: Cart payload
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/service.AddToCartPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Update a cart product.
      tags:
      - Cart
  /favorite/product/{productId}:
    delete:
      description: API for removing a product as favorite.
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: UnMark a product as favorite.
      tags:
      - Product
    post:
      description: API for making a product as favorite.
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Mark a product favorite.
      tags:
      - Product
  /favorite/products:
    get:
      description: API for getting all favorite products.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Get all favorite products.
      tags:
      - Product
  /login:
    post:
      consumes:
      - application/json
      description: API for user login using email and password
      parameters:
      - description: Login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/service.LoginUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  $ref: '#/definitions/controller.AccessToken'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: User Login
      tags:
      - Auth
  /order:
    post:
      consumes:
      - application/json
      description: API for placing an order with the products in the cart.
      parameters:
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: Order payload
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/service.OrdersPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Place an order.
      tags:
      - Order
  /orders:
    get:
      description: API for fetching all the orders of a user.
      parameters:
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/service.AllOrdersResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Get all orders of a user.
      tags:
      - Order
  /product/{productId}:
    get:
      description: API for fetching a product.
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Get a product details.
      tags:
      - Product
  /product/{productId}/reviews:
    get:
      description: API for fetching all the reviews for a product made by multiple
        users.
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/service.AllReviewsResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Get all reviews for a product.
      tags:
      - Product
  /products:
    get:
      description: API for fetching all products.
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: The number of products to fetch
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  $ref: '#/definitions/service.ProductsResponse'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Get all products.
      tags:
      - Product
  /register:
    post:
      consumes:
      - application/json
      description: API for registering users
      parameters:
      - description: Register user payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/service.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.ResUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: User Register
      tags:
      - Auth
  /renew-access-token:
    get:
      description: API for renewing the access token. The refresh token is set in
        the http-only cookie when the user first logs in so renewing the token will
        only work if the user have logged in atleast once.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  $ref: '#/definitions/controller.AccessToken'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Renew Access Token
      tags:
      - Auth
  /review/product/{productId}:
    post:
      consumes:
      - application/json
      description: API for adding a product review by user.
      parameters:
      - description: Product review payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/service.ProductReviewPayload'
      - description: Product id
        in: path
        name: productId
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.ProductReview'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Add a product review.
      tags:
      - Product
  /review/product/{reviewId}:
    delete:
      consumes:
      - application/json
      description: API for deleting a product review by user.
      parameters:
      - description: Review ID
        in: path
        name: reviewId
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.ProductReview'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Delete a product review.
      tags:
      - Product
    put:
      consumes:
      - application/json
      description: API for updating a product review by user.
      parameters:
      - description: Product review payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/service.ProductReviewPayload'
      - description: Review ID
        in: path
        name: reviewId
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.ProductReview'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Update a product review.
      tags:
      - Product
  /user:
    delete:
      description: API for deleting a user.
      parameters:
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Delete user.
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: API for updating users details.
      parameters:
      - description: Update user details payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/service.UserDetailsPayload'
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Update user details.
      tags:
      - User
  /user/address:
    post:
      consumes:
      - application/json
      description: API for adding user addresse used as delivery address.
      parameters:
      - description: Add address payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/service.UserAddressPayload'
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.Address'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Add user address.
      tags:
      - User
  /user/address/{addressId}:
    delete:
      description: API for deleting a user address.
      parameters:
      - description: Address id
        in: path
        name: addressId
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.Address'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Delete user address.
      tags:
      - User
    put:
      consumes:
      - application/json
      description: API for updating a user address.
      parameters:
      - description: Update address payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/service.UserAddressPayload'
      - description: Address id
        in: path
        name: addressId
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.Address'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Update user address.
      tags:
      - User
  /user/addresses:
    get:
      description: API for fetching all user addresses.
      parameters:
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResUserWithData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Address'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResUser'
      summary: Get all user addresses.
      tags:
      - User
swagger: "2.0"
